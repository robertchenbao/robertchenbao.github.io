<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://robertb.me</id>
    <title>Robert&apos;s Space</title>
    <updated>2020-08-19T19:59:24.740Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://robertb.me"/>
    <link rel="self" href="https://robertb.me/atom.xml"/>
    <subtitle>coding, productivity, college life, etc.</subtitle>
    <logo>https://robertb.me/images/avatar.png</logo>
    <icon>https://robertb.me/favicon.ico</icon>
    <rights>All rights reserved 2020, Robert&apos;s Space</rights>
    <entry>
        <title type="html"><![CDATA[Learning Go Part 1: Why Go?]]></title>
        <id>https://robertb.me/post/learning-go-part-1-why-go/</id>
        <link href="https://robertb.me/post/learning-go-part-1-why-go/">
        </link>
        <updated>2020-08-19T07:56:00.000Z</updated>
        <content type="html"><![CDATA[<p>I am currently learning Go language with the Coursera class, <a href="https://www.coursera.org/learn/golang-getting-started">Getting Started with Go</a>. This post is written based on lectures in week 1 of the course.</p>
<h2 id="an-introduction">An Introduction</h2>
<p>The Go <a href="https://golang.org/">official website</a> describes Go as &quot;an open-source programming language that makes it easy to build  <strong>simple</strong>,  <strong>reliable</strong>, and  <strong>efficient</strong>  software.&quot;</p>
<p>In my opinion, it does this job well though <strong>simple syntax</strong>, <strong>garbage collection</strong>, and <strong>support for concurrency</strong>.</p>
<img src="https://raw.githubusercontent.com/robertchenbao/Pictures/master/uPic/Golang.png" alt="Golang" style="zoom:50%;" />
<h2 id="simplicity">Simplicity</h2>
<p>OOP (Object-oriented programming) is a paradigm that describes concepts using class. In OOP, Classes serve as templates. The programmers then build objects based on them. If classes are like blueprints, then the objects are like real buildings.</p>
<p>Different from common OOP programming languages like Java, Go does not use the term class. Instead, it borrowed a concept called  <strong>structs</strong> from C language. It removed concepts such as inheritance or generics. In short, Go's implementation is simplified. Hence, Go is much easier to learn. In an <a href="https://www.youtube.com/watch?v=O9upVbGSBFo">interview with Lex Fridman</a>, Brian Kernighan, a professor of at Princeton, states it takes him a lot less time to accomplish a task compared to some other languages such as Haskell or Rust.</p>
<h2 id="performance">Performance</h2>
<p>There is a trade-off while designing a programming language: efficiency vs ease-of-use.</p>
<p>Every piece of software, such as Python, Java or Go, must be translated into the machine language of processors. This can be done in two ways: compile it, or interpret it.</p>
<p>The &quot;compiler approach&quot; means to translate instructions <em>once</em> before running the code, which will save time when the program is running. Hence, complied programs can often be extremely fast. But since compilers can be very picky, this type of programming language can often be difficult to code.</p>
<p>On the other hand, the &quot;interpreter approach&quot; requires to translate instructions every time while the code is executed with an interpreter. With the interpreters, interpreted programming languages are easier to work with. They automatically manage memory. Moreover, programmers don't have to specify variable types (i.e. <code>int</code>, <code>float</code>, etc.) The downside is the program will be slower.</p>
<table>
<thead>
<tr>
<th>Language Type</th>
<th>Pros</th>
<th>Cons</th>
</tr>
</thead>
<tbody>
<tr>
<td>Compiled language</td>
<td>Fast!</td>
<td>Hard to work with</td>
</tr>
<tr>
<td>Interpreted language</td>
<td>Easy-to-use</td>
<td>Slow</td>
</tr>
</tbody>
</table>
<p>Go combines many features of interpreted and compiled languages. It is designed as a compiled language, yet it has many features borrowed from interpreted languages. Thus, it (to a certain degree) gets the best of both worlds.</p>
<h3 id="concurrency">Concurrency</h3>
<p>Concurrency comes from the need for speed.</p>
<p>For more than a decade, computers have been speeding up. With better processors, the software can even run faster without any optimization.</p>
<p>However, this came to a halt in the last few years. The engineers have reached <strong>a limit in producing microprocessors</strong>. If they put more circuits in the CPU, the CPUs will easily overheat the motherboard.</p>
<p>So, some software engineers came up with the idea of <strong>parallelism</strong>. That is, to add more cores of processors in the CPU, so it can run multiple tasks can run at the same time. But more questions arise: how to organize the tasks? how to distribute the tasks among cores? What if the tasks are interdependent?</p>
<p>Hence, to achieve concurrent programming, a software (i.e. a programming language) has to deal with:</p>
<ol>
<li>Management of tasks</li>
<li>Communication between tasks</li>
<li>Sync between tasks</li>
</ol>
<p>These problems are certainly not easy. However, Go managed to create a simple interface for concurrent programming. It has <strong>built-in Concurrency abilities</strong> that is both <strong>efficient and easy to use</strong>.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[UVa Bridge Summer Program: Quite a Great Experience!]]></title>
        <id>https://robertb.me/post/uva-bridge-summer-program-quite-a-great-experience/</id>
        <link href="https://robertb.me/post/uva-bridge-summer-program-quite-a-great-experience/">
        </link>
        <updated>2020-08-11T12:52:05.000Z</updated>
        <content type="html"><![CDATA[<p>I just finished the Bridge 2020 Summer Program at UVa. It is my first experience of college life. Here are my thoughts, and hopefully, they will serve as a good reference for the prospective students.</p>
<p>Shown below is my schedule during bridge.</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/robertchenbao/Pictures/master/uPic/Bridge_2.JPG" alt="schedule during bridge" loading="lazy"></figure>
<h2 id="tldr">TL;DR</h2>
<ul>
<li>The Bridge Summer Program is composed of a Pre-Calculus math class, presentations, study halls, and bonding events.</li>
<li>The Pre-Cal class is easy at first but gets more challenging by the end. However, the professor, Dr. Timchenko, is amazing.</li>
<li>Most workshops and presentations are really useful. They cover lots of resources at UVa, as well as the first-hand experience of many students.</li>
<li>Bridge is also a great opportunity to meet people and make friends.</li>
<li>I am really glad to join this program. Worth the time &amp; effort to apply!</li>
</ul>
<h2 id="math-class-intense-but-well-taught">Math class: Intense but Well-taught</h2>
<h3 id="the-pre-cal-class">The Pre-Cal Class</h3>
<p>The math class offered at Bridge program is a 3-week Pre-Calculus class. It officially called &quot;Applied Math&quot;, which is quite a generic name. LOL.</p>
<p>However, <strong>although this course only covers Pre-Cal concepts, it was much more challenging than I expected</strong>. One big reason is it is taught in three weeks, which is <em>really short</em> given it covers an entire course.</p>
<p>The first two weeks covered types of functions and trigonometry, which were relatively easy. However, the third week was rough. Near the end of the week, the professor introduced  <em>Conic Sections</em>. I have never studied this topic before (unlike other topics in the course), and I had <em>less than two days</em> to study it before the final exam. As a result, I did not have a solid understanding of it and ended up missing several conic section questions in the final.</p>
<p>We did all homework on a platform called myOpenMath, which looks like this. Tips: After the homework is due, use &quot;practice mode&quot; if you needs extra practice!</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/robertchenbao/Pictures/master/uPic/Bridge_1.png" alt="myOpenMath" loading="lazy"></figure>
<h3 id="awesome-professor">Awesome Professor</h3>
<p>The professor, Dr. Timchenko, is amazing. She is one of the best math teachers I have had. She can teach the concepts in a very clear manner, which makes her lecture easy to follow. She is also a nice and approachable person.</p>
<h2 id="afternoon-sessions-workshops-and-panels">Afternoon Sessions: Workshops and Panels</h2>
<p>The afternoon sessions include workshops and other presentations. Most sessions are hosted by staff members, and others by upper-class undergraduate students. These presentations are good, as they helped me familiarize myself with the resources on the ground <strong>They cover a wide range of topics</strong>, from financial aid to time management.</p>
<p><strong>The Q&amp;A sessions turn out to be very helpful.</strong> Most presenters will have a short Q&amp;A with Bridge participants, which is great because I could (1) ask questions of my interest and (2) learn from others' questions.</p>
<h2 id="making-friends">Making Friends</h2>
<p>This is arguably the most significant benefit. <strong>I met many other incoming first-year students.</strong> I became friends with quite a few of them through bond events and group activities in math class. My camp counselor, who is Bridge alumni, told me she is still close friends with her Bridge classmates. For out-of-state students like me, who do not know anyone at UVa before, this can be particularly important.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I am really glad that I participated in this program. For those who received invitations (via email), it is worth the time &amp; effort to apply!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pomodoro Technique: Why, and How]]></title>
        <id>https://robertb.me/post/pomodoro-technique-why-and-how/</id>
        <link href="https://robertb.me/post/pomodoro-technique-why-and-how/">
        </link>
        <updated>2020-08-09T09:26:21.000Z</updated>
        <content type="html"><![CDATA[<p>One of the most valuable &quot;productivity tricks&quot; I learned was the Pomodoro technique. This concept has been discussed over and over by numerous productivity geeks, yet many around me still haven't heard of it. So, here is an introduction.</p>
<h2 id="overworked-exhausted-repeat">Overworked, Exhausted, Repeat</h2>
<p>Before learning this trick, I constantly overwork myself. Sometimes, I did it because I had to finish an assignment before the deadline; other times, it is because I was simply &quot;in the zone&quot;.</p>
<p>As a result, I frequently experienced burnouts. I would feel exhausted, with no motivation to do whatever at hand. Even if I force myself to get some work done, I usually couldn't focus. Ugh.</p>
<img src="https://raw.githubusercontent.com/robertchenbao/Pictures/master/uPic/Pomodoro%20%231.png" alt="Pomodoro #1" style="zoom:25%;" />
<h2 id="enter-the-pomodoro-technique">Enter the Pomodoro technique.</h2>
<p>In 2018, I learned about the Pomodoro technique. It is a time-management method developed by Francesco Cirillo. It essentially forces you to switch between focused work and short breaks.</p>
<blockquote>
<p><strong>The Pomodoro Technique® Core Process</strong></p>
<ol>
<li>Choose a task you'd like to get done</li>
<li>Set the Pomodoro for 25 minutes</li>
<li>Work on the task  until the Pomodoro rings</li>
<li>When the Pomodoro rings, put a checkmark on a paper</li>
<li>Take a short break</li>
<li>Every 4 pomodoros, take a longer break</li>
</ol>
<p>-- Excerpt from <a href="https://francescocirillo.com/pages/pomodoro-technique">Francesco Cirillo's website</a></p>
</blockquote>
<p>This method has several benefits. Some people found it helpful for keeping track of how much work is done in a day. I found it extremely helpful for avoiding burnouts.</p>
<img src="https://raw.githubusercontent.com/robertchenbao/Pictures/master/uPic/Pomodoro%20%232.png" alt="Pomodoro #2" style="zoom:25%;" />
<h2 id="what-to-do-during-breaks">What to do during breaks.</h2>
<p>When I first began to use the Pomodoro technique, I didn't quite know what was I supposed to do during breaks. Here are some suggestions for beginners:</p>
<ul>
<li>Stretch. Nowadays, many people have to sit in front of a computer screen for hours, whether it is for coding, reading, or attending zoom lectures. As the time goes by, this'll hurt the back and neck a lot. So, stretches is very useful for many people.</li>
<li>Eat or drink. Fruits and water are great.</li>
<li>Breathe. This one is another great choice for short breaks. Even though you don't have the time for a 10-minute meditation, some deep breaths can help a lot.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>The Pomodoro technique is awesome. It is great for students. It is also a wonderful tool for anyone who wants to get more quality work done (and fewer burnouts).</p>
]]></content>
    </entry>
</feed>